# vim: ft=zsh
[ -f ~/.zsh.env.sh ] && source ~/.zsh.env.sh

# [ -f $HOME/.cache/wal/sequences ] && cat $HOME/.cache/wal/sequences

autoload -U +X bashcompinit && bashcompinit
autoload -U +X compinit && compinit

bindkey "^?" backward-delete-char
# vi mode
bindkey -v

# Change cursor shape for different vi modes.
function zle-keymap-select {
  if [[ ${KEYMAP} = vicmd ]] ||
     [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
  elif [[ ${KEYMAP} = main ]] ||
       [[ ${KEYMAP} = viins ]] ||
       [[ ${KEYMAP} = '' ]] ||
       [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
  fi
}

_has() {
    which $1>/dev/null 2>&1
}

zle -N zle-keymap-select
zle-line-init() {
    zle -K viins # initiate `vi insert` as keymap (can be removed if `bindkey -V` has been set elsewhere)
    echo -ne "\e[5 q"
}
zle -N zle-line-init
echo -ne '\e[5 q' # Use beam shape cursor on startup.
preexec() { echo -ne '\e[5 q' ;} # Use beam shape cursor for each new prompt.

bindkey "^?" backward-delete-char


if command -v python3 &> /dev/null
then
  PYTHONBIN=$(python3 -m site --user-base)/bin
  export PATH=$PATH:$PYTHONBIN
fi

export PATH=$PATH:$HOME/.local/bin
export PATH=$PATH:$HOME/.cargo/bin:$HOME/.local/kitty.app/bin
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:$HOME/Android/Sdk
export PATH=$PATH:$GOROOT/bin:$GOPATH/bin
export PATH="/usr/local/sbin:$PATH"

ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=13"
HISTFILE="$HOME/.zsh_history"
HISTSIZE=10000000
SAVEHIST=10000000

# quit bugging me!
DISABLE_AUTO_UPDATE="true"

_zpcompinit_custom() {
  setopt extendedglob local_options
  autoload -Uz compinit
  local zcd=${ZDOTDIR:-$HOME}/.zcompdump
  local zcdc="$zcd.zwc"
  # Compile the completion dump to increase startup speed, if dump is newer or doesn't exist,
  # in the background as this is doesn't affect the current session
  if [[ -f "$zcd"(#qN.m+1) ]]; then
        compinit -i -d "$zcd"
        { rm -f "$zcdc" && zcompile "$zcd" } &!
  else
        compinit -C -d "$zcd"
        { [[ ! -f "$zcdc" || "$zcd" -nt "$zcdc" ]] && rm -f "$zcdc" && zcompile "$zcd" } &!
  fi
}

_zpcompinit_custom

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh
[ -f ~/.zshrc_extra ] && source ~/.zshrc_extra

# where is antibody keeping its stuff?
ANTIBODY_HOME="$(antibody home)"

eval "$(starship init zsh)"

source ~/.zsh_plugins.sh
source ~/.bash_functions
source ~/.bash_aliases

if command -v pfetch &> /dev/null
then
  pfetch
fi



if [ "$(uname)" = "Darwin" ]; then
    # Do something under Mac OS X platform
elif [ "$(expr substr $(uname -s) 1 5)" = "Linux" ]; then
    [ -f ~/.zshrc.linux ] && source ~/.zshrc.linux
elif [ "$(expr substr $(uname -s) 1 10)" = "MINGW32_NT" ]; then
    # Do something under 32 bits Windows NT platform
elif [ "$(expr substr $(uname -s) 1 10)" = "MINGW64_NT" ]; then
    # Do something under 64 bits Windows NT platform
fi


[[ -f `which macchina` ]] && macchina

# Export Codeartifact auth (generated by 'caws login')
[ -f "$HOME/.config/pip/pip.conf" ] && export PIP_INDEX_URL=$(awk -F "= " '/index-url/ {print $2}' $HOME/.config/pip/pip.conf)

# . /opt/homebrew/opt/asdf/libexec/asdf.sh

# if command -v wal &> /dev/null; then
#     wal -f ~/dotfiles/brogrammer.json -q
# fi

export PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
export PUPPETEER_EXECUTABLE_PATH=`which chromium`

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# pnpm
export PNPM_HOME="/Users/vik/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
eval $(thefuck --alias)

# place this after nvm initialization!
autoload -U add-zsh-hook

load-nvmrc() {
  local nvmrc_path
  nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version
    nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
      nvm use
    fi
  elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}

add-zsh-hook chpwd load-nvmrc
load-nvmrc

eval "$(zoxide init zsh)"
